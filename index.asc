:source-highlighter: pygments
:stem:


= Lista de Exercicios: Willian Kossmann =

Willian Kossmann da Silva <kossmannwillian@gmail.com>

Site para hospedagem das respostas dos exercicios propostos no tutorial do Prof. Agostinho Brito. 

Gihub ([http://agostinhobritojr.github.io/tutoriais/pdi/])

== Exercicio 1 - Cap.3 ==

* É solicitado ao usuário dois pontos pertecentes ao interior da imagem, posteriormente é verificado se há a necessecidade de troca dos pontos para que o 'for' fica sempre de forma crescente. Após isso é feita a varredura na imagem e os pixels que forem identificados como pertecentes do retangulo é aplicado o negativo no mesmo.

[[exa_regions, Regions]]
[source,cpp]
.regions.cpp
----
include::regions.cpp[]
----

* Para teste do algoritmo, foi informado (10,90) e (80,130) para a geração da imagem a seguir:

[[fig_regions, Regions]]
//[.text-center]
.Saída do programa regions
image::saida3-1.png[title="Saída do programa regions"]

== Exercicio 2 - Cap.3 ==

* Neste programa, é feita a troca das regioes diagonais da imagem. 

[[exa_trocaregioes, TrocaRegioes]]
[source,cpp]
.trocaregioes.cpp
----
include::trocaregioes.cpp[]
----

* Exemplo:

[[fig_bolhas, Bolhas]]
//[.text-center]
.Imagem Original
image::bolhas.png[title="Imagem Original"]

[[fig_trocaregioes, trocaregioes]]
//[.text-center]
.Saída do programa trocaregioes
image::saida3-2.png[title="Saída do programa trocaregioes"]

== Exercicio 1 - Cap.4 ==

* Em alguns casos a quantidade de elementos em uma imagem pode exceder 255, isso acontece quando a imagem possui muito ruido, fazendo com que pequenos pixels de ruido sejam contabilizados como objetos. Neste caso pode-se tentar melhorar o filtro de ruidos ou utilizar outras tecnicas de filtragem. Porém pode ocorrer também quando se é feita uma imagem a longa distancia permitindo realmente a observação de varios objetos, excedendo a capacidade de 255 elementos, neste caso uma solução seria a transformação para uma imagem RGB para poder efetuar a rotulação nos três canais de cores ficando assim com uma quantidade limite muito superior (255x255x255 = 16581375 elementos).

[[exa_solucao, Solucao]]
[source,cpp]
.solucao.cpp
----
include::solucao.cpp[]
----

* Exemplo de aplicação:

[[fig_solucao, solucao]]
//[.text-center]
.Saída do programa solucao
image::saida4-1.png[title="Saída do programa solucao"]

== Ecercicio 2 - Cap.4 ==

* Para a solução deste problema foi definido os seguintes passos:
.. Percorrer as bordas da imagem, e ao encontrar algum objeto na imagem, é feito o flood fill para a cor do fundo, para que assim aquele objeto não interfira nas contagens.
.. Executar loop de rotulação semelhante ao do exemplo disponibilizado.
.. Ao termino do loop, encontrar o fundo da imagem e excutar apenas um flood fill para um ton de cinza que não interfira na contagem.
.. Neste ponto, temos que todos os buracos estão com o ton de cinza do fundo inicial (0). Assim é percorrida a matriz inteira a cada objeto encontrado para verficar se há um buraco pertecente a ele, utilizando de uma variavel auxiliar para guardar o ultimo ton de cinza verificado. Caso o ton de cinza atual for 0 e o ton de cinza anterior seja igual ao da rotulação do objeto que está sendo verificado, logo este objeto possui um buraco, e é contabilizado apenas uma vez, idependendo da quantidade de buracos.

[[exa_cntBolhas, ContaBolhas]]
[source,cpp]
.conta_bolhas_buraco.cpp
----
include::conta_bolhas_buraco.cpp[]
----

* Exemplo de aplicação:

[[fig_bolhas2, bolhas2]]
//[.text-center]
.bolhas2
image::bolhas2.png[title="Imagem bolhas2.png"]

[[fig_passo1, passo1]]
//[.text-center]
.passo1
image::passo1.png[title="Passo a."]

[[fig_passo2, passo2]]
//[.text-center]
.passo2
image::passo2.png[title="Passo b."]

[[fig_passo3, passo3]]
//[.text-center]
.passo3
image::passo3.png[title="Passo c."]

[[fig_passo4, passo4]]
//[.text-center]
.passo4
image::passo4.png[title="Passo d."]

* Saida textual:

Numero de bolhas total:     16

Numero de bolhas c/ buracos: 5

Numero de bolhas s/ buracos: 11

== Exercicio 1 - Cap.5 ==

* Utilizada uma função otimizada do opencv de aplicação da formula de equalização. 

[[exa_equalize, Equalize]]
[source,cpp]
.equalize.cpp
----
include::equalize.cpp[]
----

[[fig_Original1, original1]]
//[.text-center]
.Original1
image::Original1.png[title="Original ambiente claro"]

[[fig_Equalizada1, Equalizada1]]
//[.text-center]
.Equalizada1
image::Equalizada1.png[title="Equalizada ambiente claro"]

[[fig_Original2, original2]]
//[.text-center]
.Original2
image::Original2.png[title="Original ambiente escuro"]

[[fig_Equalizada2, Equalizada2]]
//[.text-center]
.Equalizada2
image::Equalizada2.png[title="Equalizada ambiente escuro"]

== Exercicio 2 - Cap.5 ==

* Para a solução deste problema, foi feita o calculo de histograma, e feita a subtração absoluta do histograma do frame anterior e armazenado em um somador. Se este valor ultrapassase um determinado valor (obtido a partir de testes) é gerado um "ALERTA" na saida do terminal.

[[exa_motiondetector, motiondetector]]
[source,cpp]
.motiondetector.cpp
----
include::motiondetector.cpp[]
----

== Exercicio - Cap.6 ==

* A filtragem é originada a partir de da convolução da imagem com uma matriz denotada de mascara. Para a aplicação de dois filtros seguidos, pela propriedade de convolução, ao invez de filtrar em um e a saida desse filtrar no segundo, podemos unir as duas mascaras. Com base nisso para fazer a aplicação de laplaciano em cima do gaussiano, podemos fazer a multiplicação das duas mascaras (gaussiano x laplaciano), a partir dai temos a mascara equivalente das duas aplicações dos filtros.

[[exa_laplgauss, laplgauss]]
[source,cpp]
.laplgauss.cpp
----
include::laplgauss.cpp[]
----

[[fig_resultadoLaplace, resultadoLaplace]]
//[.text-center]
.resultadoLaplace
image::resultadoLaplace.png[title="Resultado Laplaciando simples"]

[[fig_resultadoLaplGaus, resultadoLaplGaus]]
//[.text-center]
.resultadoLaplGaus
image::resultadoLaplGaus.png[title="Resultado Laplaciando apos Gaussiano"]



